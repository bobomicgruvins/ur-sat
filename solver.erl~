-module(solver).
-compile(export_all).
-include_lib("records.hrl").

%% Private Functions:
%% search(Conflict,Solver)
%% search(true,S) ->
   

%%literal varibles always begin with P !!

gedit 
%% propogate(#solver{propQ = PropQ} = S) ->
%%     %% Returns either no_conflict, or a conflict clause
%%     case queue:is_empty(PropQ) of
%% 	false -> Literal = queue:out(PropQ),
%% 		 Watches = get_watches(Literal),
%% 		 process
	   


%% Public Interface:
		       
new(VarCount, ClauseCount) ->
    #solver{watches = array:new(2*VarCount,[]),
	    constraints = [],
	    assignments = array:new(VarCount,[{default,undefined}]),
	    var_dlevels = array:new(VarCount,[]),
	    reason = array:new(VarCount,[]),
	    propQ = queue:new()}.

make_constraint(Type, S, ArgBundle) ->
    %% must always return a "solver" record
    case Type:new(S, ArgBundle) of
	{Type, Constraint, S} -> {true, Constraint, S};
	trivial_success -> {true, S};
	conflict -> dear_god_no
    end.

insert_constraints(Type, ArgBundles, #solver{constraints = Constraints} = S) ->
    code:ensure_loaded(Type),
    lists:foldl(fun(B, Acc) -> make_constraint(Type, S, B) end, S, ArgBundles).
    
%%:make_constraint/3,
%% S#solver{constraints = array:map(fun(ArgBundle) ->
%% 					     {Type, Constraint} = Type:new(S, ArgBundle),
%% 					     Constraint end, 
%% 				     ArgBundles)}.
add_constraints(NewClause, #solver{constraints = Constraints} = S)->
	S#solver{constraints = [NewClause|Constraints]}.


add_watch(L, Constraint, #solver{watches = Watches} = S) ->
    LitID = literal:id(L),
    %% need to get current value of watches:literalID
    case ets:lookup(Watches,LitID) of
	[] -> ets:insert(Watches,{LitID,[Constraint]});				 %% THIS IS BROKEN ALL TO HELL!!!! we want it toreturn one new solver object where 1 										   	    watched literal has been added
	CurrentWatches -> ets:insert(Watches,{LitID,[Constraint|CurrentWatches]})
    end.

add_watch(P, Constraint, #solver{watches = Watches} = S) ->
    LitID = P#lit.id,
    

enqueue(L, FromClause, S) ->                            
    case value(L, S) of
	false -> {conflict, S};						%%this enques thing in a solver object and then returns that solver object
	true -> {consistent, S};
	undefined -> {consistent, store_fact(L, FromClause, S)}
    end.
		
	
store_fact(P, FromClause, #solver{assignments = A, reason = R,      %%returns an updated solver object where we have enqued an inplyed varible for propagation. 
				  current_dlevel = D, trail = T,    %% we return a solver object with P added to the queue in the solver record. 
				  propQ = Q, var_dlevel = VDs} = S) ->
    Var = literal:variable(P),

     S#solver{assignments = array:set(Var, not(literal:signed(P)), A),  
		  reason = array:set(Var, FromClause, R),
		  var_dlevel = array:set(Var, D, VDs),
		  trail = [P|T], propQ = queue:in(P, Q)}.


value(L, #solver{assignments = A} = S) ->       %% returns the valaue of a literal repersented by a varible. 
    array:get(L#lit.variable, A).		%% in other wrords, true, false or undefined.


propogate(#solver{propQueue=Q}=S)->                                             %% this is unit propgation, process_watches need to be written.
	case queue:is_empty(Q) of
		true->{ok, S};							%% if queue is empty return the solver object
		false->{{value, P}, NewPQ}=queue:out(Q),			%% if the queue is not empty return processes_watches(p, ...)
 			process_watches(P,S#solver{propQ=NewPQ})
	end.



bumpClause(Clause, S) ->
    %% a PLACEHOLDER: none of the activity heuristic is implemented yet
    true.

bumpVarsOf(Literals, S) ->
    %% a PLACEHOLDER: none of the activity heuristic is implemented yet
    true.

%%  21:24 < valross> mogglefrange, code:ensure_loaded(modulename)  ?
%%  21:24 < yrashk> mogglefrange: see erl -man code
    
